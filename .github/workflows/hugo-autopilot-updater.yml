name: Hugo Autopilot Updater

on:
  workflow_call:
    inputs:
      hugo_version_file:
        description: 'Path to file containing Hugo version'
        required: false
        type: string
        default: '.hugoversion'
      update_branch:
        description: 'Branch name to use for update PRs'
        required: false
        type: string
        default: 'update-hugo'
      pr_title_prefix:
        description: 'Prefix for PR titles'
        required: false
        type: string
        default: 'Update Hugo:'
    outputs:
      pr_created:
        description: 'Whether a PR was created for a Hugo update'
        value: ${{ jobs.update.outputs.pr_created }}
      update_needed:
        description: 'Whether a Hugo update was needed'
        value: ${{ jobs.update.outputs.update_needed }}

permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      pr_created: ${{ steps.set-outputs.outputs.pr_created }}
      update_needed: ${{ steps.set-outputs.outputs.update_needed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Check Hugo version
        id: check
        run: |
          CURRENT=$(cat ${{ inputs.hugo_version_file }})
          LATEST=$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          
          # Exit gracefully if API call fails
          if [ -z "$LATEST" ]; then
            echo "Failed to fetch latest Hugo version"
            exit 0
          fi
          
          echo "Current: $CURRENT, Latest: $LATEST"
          
          if [ "$LATEST" != "$CURRENT" ]; then
            echo "NEEDS_UPDATE=true" >> $GITHUB_OUTPUT
            echo "CURRENT=$CURRENT" >> $GITHUB_OUTPUT
            echo "LATEST=$LATEST" >> $GITHUB_OUTPUT
          fi
      
      - name: Update version file
        if: steps.check.outputs.NEEDS_UPDATE == 'true'
        run: echo "${{ steps.check.outputs.LATEST }}" > ${{ inputs.hugo_version_file }}
      
      - name: Create Pull Request
        if: steps.check.outputs.NEEDS_UPDATE == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "Update Hugo from ${{ steps.check.outputs.CURRENT }} to ${{ steps.check.outputs.LATEST }}"
          title: "${{ inputs.pr_title_prefix }} ${{ steps.check.outputs.CURRENT }} ‚Üí ${{ steps.check.outputs.LATEST }}"
          body: |
            This PR updates Hugo from version ${{ steps.check.outputs.CURRENT }} to ${{ steps.check.outputs.LATEST }}.
            
            ## Changelog
            See the [Hugo release notes](https://github.com/gohugoio/hugo/releases/tag/v${{ steps.check.outputs.LATEST }}) for details.
            
            *This PR was automatically created by the Hugo Updater workflow.*
          branch: ${{ inputs.update_branch }}
          delete-branch: true
          labels: |
            dependencies
            automated
      
      - name: Auto-merge Pull Request
        if: steps.create-pr.outputs.pull-request-number
        uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""  # No labels required
          MERGE_METHOD: "squash"
          MERGE_COMMIT_MESSAGE: "pull-request-title"
          PULL_REQUEST: "${{ steps.create-pr.outputs.pull-request-number }}"
      
      - name: PR Creation Status
        id: set-outputs
        run: |
          # Default to false
          echo "pr_created=false" >> $GITHUB_OUTPUT
          echo "update_needed=false" >> $GITHUB_OUTPUT
          
          # Check if PR was created
          if [ "${{ steps.check.outputs.NEEDS_UPDATE }}" == "true" ] && [ -n "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
            echo "pr_created=true" >> $GITHUB_OUTPUT
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Pull request #${{ steps.create-pr.outputs.pull-request-number }} created successfully"
            echo "URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          elif [ "${{ steps.check.outputs.NEEDS_UPDATE }}" == "true" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "‚ùå Failed to create pull request"
            echo "This could be due to no changes being detected or an error in the PR creation process"
            exit 1
          else
            echo "No Hugo update needed"
          fi
      
      # Debug information before triggering Hugo Builder
      - name: Debug Repository Info
        if: steps.create-pr.outputs.pull-request-number
        run: |
          echo "::group::Repository Information"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "::endgroup::"
          
          echo "::group::PR Information"
          echo "PR Number: ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          echo "::endgroup::"
          
          echo "::group::Token Permissions"
          echo "GITHUB_TOKEN permissions: contents:write, pull-requests:write"
          echo "::endgroup::"

      - name: Trigger Hugo Builder
        if: steps.create-pr.outputs.pull-request-number
        id: dispatch
        uses: peter-evans/repository-dispatch@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: hugo-autopilot-build
          repository: ${{ github.repository }}
          client-payload: '{"clear_pending": true}'
          
      # Debug information after triggering Hugo Builder
      - name: Debug Dispatch Result
        if: steps.create-pr.outputs.pull-request-number
        run: |
          echo "::group::Dispatch Result"
          echo "Dispatch Step Status: ${{ steps.dispatch.outcome }}"
          echo "Dispatch Step Conclusion: ${{ steps.dispatch.conclusion }}"
          echo "::endgroup::"
          
          echo "::notice::üîÑ Triggered hugo-autopilot-build event for ${{ github.repository }}"
          echo "::notice::‚ö†Ô∏è If the build is not triggered, check repository settings to ensure workflow permissions allow repository dispatch events"
